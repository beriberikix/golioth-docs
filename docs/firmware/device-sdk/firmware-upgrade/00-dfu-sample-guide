---
title: DFU Sample Guide
sidebar_position: 2
---

The Device Firmware Update service includes several helper functions and data structures.  

The first discussed are found within fw.h. The enum ```golioth_fw_state{}``` is used to register and indicate the current state of the DFU service process.  The struct ```golioth_dfu_result{}``` indicates whether the process was successful or that an error has occurred. The ```golioth_fw_download_ctx``` struct contains the context of the firmware download. The inner struct ```golioth_blockwise_download_ctx``` contains CoAP-specific blockwise transfer elements. The URI defines the artifact and version of artifact being downloaded. In the example case of downloading multiple artifacts for perhaps updating both a cellular modem as well as the host MCU firmware, there would be an instance of ```golioth_fw_download_ctx``` for each firmware download artifact.

After requesting a specific version of firmware from the Golioth server, a CBOR-encoded payload is received and parsed with the ```golioth_fw_desired_parse()``` function. The ```golioth_fw_observe_desired()``` function works similarly to the observe functions found in the LightDB observe samples.  This function creates a subscription to the state of the firmware in the cloud in order to trigger an update if the active firmware is changed.  The ```golioth_fw_download()``` is a helper function that makes use of the ```golioth_client``` object to request a firmware download from Golioth.  The last function in fw.h is ```golioth_fw_report_state```.  It is used to commmunicate the application state to Golioth server.  The reported state is used to govern firmware transfers and report to Golioth server when transfers are complete.

User application must provide golioth_fw_download_ctx()

The ```log_ctrl.h``` header is included to make use of the log functions which connect the Golioth logging backend to the Zephyr logging system. ```LOG_PANIC()``` is used to synchronize the log messages and ensure that all logs are received by Golioth server prior to exiting the function containing logging calls.  The ```LOG_PANIC()``` call will ensure that log calls in all threads are processed.  In the case of the sample code this is performed prior to calling a system reboot.

The ```flash.h``` is a helper included specifically for the dfu application. The flash helper functions govern things like writing to flash and confirming contents of flash. 

Most of the flash helper functions provide an abstraction for testing with the QEMU platform. If the project is configured to use a platform utilizing MCUboot, then most of the functions present in this file will not be used as indicated by the ```#ifdef CONFIG_BOOTLOADER_MCUBOOT``` section of code.

In the ```main.c``` file the first thing to be instantiated is the ```golioth_client``` struct to enable the Golioth system client.  Next the ```coap_reply``` struct is instantiated with memory allocated for more than one reply.  This larger storage reservation is unique to this sample as the other samples reserve space for only one coap reply.  There are currently two replies in use.  One is for receiving the blockwise transfer, and the other is used for receiving the desired artifact version message.

The ```dfu_ctx{}``` struct contains the both the firmware download context :```golioth_fw_download_ctx``` as well as the ```flash_img_context```. The ```flash_img_context``` is zephyr-specific and allows the application to track how many bytes have been written to flash.

The ```data_received()``` function receives each block of the firmware update.